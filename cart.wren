// title:  game title
// author: game developer
// desc:   short description
// script: wren

class Sprite {
	static static_platform { 16 }
	static moving_platform { 32 }
	static outline { 48 }
}

class Vector2 {
	construct new() {
		_x = 0
		_y = 0
	}
	construct new(x, y) {
		_x = x
		_y = y
	}
	x { _x }
	y { _y }

	- { Vector2.new(-_x, -_y) }
	round { Vector2.new(_x.round, _y.round) }
	length { (_x*_x + _y*_y).sqrt }
	+(rhs) {
		if (rhs is Num) return Vector2.new(_x+rhs, _y+rhs)
		if (rhs is Vector2) return Vector2.new(_x+rhs.x, _y+rhs.y)
		Fiber.abort("TypeError: Vector2 + %(rhs)")
	}
	-(rhs) {
		if (rhs is Num) return Vector2.new(_x-rhs, _y-rhs)
		if (rhs is Vector2) return Vector2.new(_x-rhs.x, _y-rhs.y)
		Fiber.abort("TypeError: Vector2 - %(rhs)")
	}
	*(rhs) {
		if (rhs is Num) return Vector2.new(_x*rhs, _y*rhs)
		if (rhs is Vector2) return Vector2.new(_x*rhs.x, _y*rhs.y)
		Fiber.abort("TypeError: Vector2 * %(rhs)")
	}
	/(rhs) {
		if (rhs is Num) return Vector2.new(_x/rhs, _y/rhs)
		if (rhs is Vector2) return Vector2.new(_x/rhs.x, _y/rhs.y)
		Fiber.abort("TypeError: Vector2 / %(rhs)")
	}
	[idx] {
		if (idx == 0) return _x
		if (idx == 1) return _y
		Fiber.abort("Cannot find %(idx)-th member of Vector2")
	}
}

class Game is TIC {
	construct new() {
		_screen_size = Vector2.new(240, 140)
		_demo1 = Demo1.new(Vector2.new(0, 24))
		_demo2 = Demo2.new(Vector2.new(80, 24))
	}
	TIC() {
		TIC.cls()
		TIC.print("Ahead-of-state animation methods")
		_demo1.draw()
		_demo2.draw()
	}
}

class Demo {
	construct new(offset) {
		_offset = offset
	}
	local_to_screen(pos) {
		return _offset + pos * 8
	}

	static print(text, pos) {
		TIC.print(text, pos.x, pos.y, 15, false, 1, true)
	}
	static mix(lhs, rhs, x) {
		return lhs * (1-x) + rhs * x
	}
}

class CyclicPatrolPath {
	construct new(waypoints) {
		_waypoints = waypoints
		_i = 0 // which waypoints I'm moving away from
		_mileage = 0
		_speed = 1/32
	}
	update() {
		_mileage = _mileage + _speed
		while (_mileage > max_mileage) {
			_mileage = _mileage - max_mileage
			_i = _i + 1
		}
	}

	from { _waypoints[_i % _waypoints.count] }
	to { _waypoints[(_i + 1) % _waypoints.count] }
	max_mileage { (to - from).length }
	pos { Demo.mix(from, to, _mileage / max_mileage) }
	pos_quantized { pos.round }
}

/*
Ahead-of-state animation demo 1
Note that the rectangle moves in game logic by grid, is animated by pixel
*/
class Demo1 is Demo {
	construct new(offset) {
		super(offset)
		_map_size = Vector2.new(7, 7)
		_platform = CyclicPatrolPath.new([
			Vector2.new(2, 2),
			Vector2.new(2, 5),
			Vector2.new(1, 5),
			Vector2.new(1, 4),
			Vector2.new(4, 4),
			Vector2.new(4, 2),
		])
	}
	draw() {
		// update
		_platform.update()
		var pos = local_to_screen(_platform.pos_quantized)
		var tweened_pos = local_to_screen(_platform.pos)

		// draw
		draw_map_center(0, 0, _map_size.x, _map_size.y)
		TIC.spr(Sprite.outline, pos.x, pos.y)
		TIC.spr(Sprite.moving_platform, tweened_pos.x, tweened_pos.y, 0)
		var text_pos = local_to_screen(Vector2.new(0, -1.75))
		Demo.print("Tween (trivial)\n(next state known)", text_pos)
	}
	draw_map_center(x, y, w, h) {
		var map_pos = local_to_screen(Vector2.new(0, 0))
		TIC.map(x, y, w, h, map_pos.x, map_pos.y)
	}
}

class Demo2 is Demo {
	construct new(offset) {
		super(offset)
	}
	draw() {
		var text_pos = local_to_screen(Vector2.new(0, -1.75))
		Demo.print("WIP", text_pos)
	}
}

// <TILES>
// 001:efffffffff222222f8888888f8222222f8fffffff8ff0ffff8ff0ffff8ff0fff
// 002:fffffeee2222ffee88880fee22280feefff80fff0ff80f0f0ff80f0f0ff80f0f
// 003:efffffffff222222f8888888f8222222f8fffffff8fffffff8ff0ffff8ff0fff
// 004:fffffeee2222ffee88880fee22280feefff80ffffff80f0f0ff80f0f0ff80f0f
// 016:000000000ffffff00ffffff00ffffff00ffffff00ffffff00ffffff000000000
// 017:f8fffffff8888888f888f888f8888ffff8888888f2222222ff000fffefffffef
// 018:fff800ff88880ffef8880fee88880fee88880fee2222ffee000ffeeeffffeeee
// 019:f8fffffff8888888f888f888f8888ffff8888888f2222222ff000fffefffffef
// 020:fff800ff88880ffef8880fee88880fee88880fee2222ffee000ffeeeffffeeee
// 032:000000000ffffff00f0000f00f0000f00f0000f00f0000f00ffffff000000000
// 048:8888888880000008800000088000000880000008800000088000000888888888
// </TILES>

// <MAP>
// 000:010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 001:010000010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 002:010000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 003:010100010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 004:010000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 005:010000010000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 006:010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// </MAP>

// <PALETTE>
// 000:140c1c44243430346d4e4a4e854c30346524d04648757161597dced27d2c8595a16daa2cd2aa996dc2cadad45edeeed6
// </PALETTE>

